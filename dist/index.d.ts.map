{"mappings":";AAGA;;;;;GAKG;AACH,8BAA8B,CAAC,EAAE,IAAI,SAAS,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,GAChG;KACG,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;CACzE,CAAC,IAAI,CAAC,CAAA;AAET;;;;;;GAMG;AACH;IACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,SAAS,GAAG,OAAO,CAAA;CAC/B;AAED;;GAEG;AACH,kCAAkC;IAChC,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB,IAAI,CAAC,EAAE,MAAM,OAAO,CAAA;IACpB,QAAQ,EAAE,MAAM,SAAS,CAAA;CAC1B,CAAA;AASD,OAAO,MAAM,gBAAgB,MAAM,EAAE,CACnC,kBAAkB,mBAAmB,EAAE,UAAU,GAAG,UAAU,GAAG,MAAM,CAAC,CA4BzE,CAAA","sources":["src/src/PartialHydrate.tsx","src/PartialHydrate.tsx"],"sourcesContent":[null,"'use client'\nimport * as React from 'react'\n\n/**\n * Requires at least one property of the given type T.\n *\n * @template T - The type to require properties from.\n * @template Keys - The keys of the type T to enforce presence.\n */\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n  }[Keys]\n\n/**\n * Function type for checking if a value is defined.\n *\n * @template T - The type of the value to check.\n * @param {T | undefined} v - The value to check for definedness.\n * @returns {boolean} - True if the value is defined, false otherwise.\n */\nexport interface FnIsDefined {\n  <T>(v: T | undefined): boolean\n}\n\n/**\n * Type for partial hydration props in React components.\n */\nexport type PartialHydrateProps = {\n  minWidth?: number\n  maxWidth?: number\n  when?: () => boolean\n  children: React.ReactNode\n}\n\nfunction useIsFirstRender(): boolean {\n  const isFirst = React.useRef(true)\n  return !!isFirst.current && ((isFirst.current = false), true)\n}\n\nconst isDefined: FnIsDefined = (v) => typeof v !== 'undefined' && v !== null\n\nexport const PartialHydrate: React.FC<\n  RequireAtLeastOne<PartialHydrateProps, 'minWidth' | 'maxWidth' | 'when'>\n> = ({ children, minWidth, maxWidth, when }) => {\n  const id = 'partial:' + React.useId()\n  const isClient = typeof window !== 'undefined'\n  const isFirstRender = useIsFirstRender()\n  const innerWidth = window.innerWidth\n\n  const removeChildren = (id: string) => {\n    if (isClient && isFirstRender) {\n      const el = document.getElementById(id)\n      el && (el.innerHTML = '')\n    }\n    return !0\n  }\n\n  const render = isDefined(when)\n    ? (isClient ? when!() : true) && removeChildren(id)\n    : isDefined(minWidth) && isDefined(maxWidth)\n      ? (isClient ? innerWidth <= minWidth! && innerWidth >= maxWidth! : true) && removeChildren(id)\n      : isDefined(minWidth)\n        ? (isClient ? innerWidth <= minWidth! : true) && removeChildren(id)\n        : (isClient ? innerWidth >= maxWidth! : true) && removeChildren(id)\n\n  return (\n    <div id={id} style={{ display: render ? 'contents' : 'none' }}>\n      {render && children}\n    </div>\n  )\n}\n"],"names":[],"version":3,"file":"index.d.ts.map","sourceRoot":"../"}