{"mappings":";;;;;AAkCA,SAAS;IACP,IAAM,UAAU,cAAa;IAC7B,OAAO,CAAC,CAAC,QAAQ,OAAO,IAAK,CAAA,AAAC,QAAQ,OAAO,GAAG,OAAQ,IAAG;AAC7D;AAEA,IAAM,kCAAyB,SAAC;WAAM,OAAO,MAAM,eAAe,MAAM;;AAEjE,IAAM,4CAET;QAAG,iBAAA,UAAU,iBAAA,UAAU,iBAAA,UAAU,aAAA;IACnC,IAAM,KAAK,aAAa;IACxB,IAAM,WAAW,gCAAU;IAC3B,IAAM,gBAAgB;IACtB,IAAM,aAAa,OAAO,UAAU;IAEpC,IAAM,iBAAiB,SAAC;QACtB,IAAI,YAAY,eAAe;YAC7B,IAAM,KAAK,SAAS,cAAc,CAAC;YACnC,MAAO,CAAA,GAAG,SAAS,GAAG,EAAC;QACzB;QACA,OAAO,CAAC;IACV;IAEA,IAAM,SAAS,gCAAU,QACrB,AAAC,CAAA,WAAW,SAAU,IAAG,KAAM,eAAe,MAC9C,gCAAU,aAAa,gCAAU,YAC/B,AAAC,CAAA,WAAW,cAAc,YAAa,cAAc,WAAY,IAAG,KAAM,eAAe,MACzF,gCAAU,YACR,AAAC,CAAA,WAAW,cAAc,WAAY,IAAG,KAAM,eAAe,MAC9D,AAAC,CAAA,WAAW,cAAc,WAAY,IAAG,KAAM,eAAe;IAEtE,qBACE,gBAAC;QAAI,IAAI;QAAI,OAAO;YAAE,SAAS,SAAS,aAAa;QAAO;kBACzD,UAAU;;AAGjB","sources":["src/PartialHydrate.tsx"],"sourcesContent":["import * as React from 'react'\n\n/**\n * Requires at least one property of the given type T.\n *\n * @template T - The type to require properties from.\n * @template Keys - The keys of the type T to enforce presence.\n */\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n  }[Keys]\n\n/**\n * Function type for checking if a value is defined.\n *\n * @template T - The type of the value to check.\n * @param {T | undefined} v - The value to check for definedness.\n * @returns {boolean} - True if the value is defined, false otherwise.\n */\nexport interface FnIsDefined {\n  <T>(v: T | undefined): boolean\n}\n\n/**\n * Type for partial hydration props in React components.\n */\nexport type PartialHydrateProps = {\n  minWidth?: number\n  maxWidth?: number\n  when?: () => boolean\n  children: React.ReactNode\n}\n\nfunction useIsFirstRender(): boolean {\n  const isFirst = React.useRef(true)\n  return !!isFirst.current && ((isFirst.current = false), true)\n}\n\nconst isDefined: FnIsDefined = (v) => typeof v !== 'undefined' && v !== null\n\nexport const PartialHydrate: React.FC<\n  RequireAtLeastOne<PartialHydrateProps, 'minWidth' | 'maxWidth' | 'when'>\n> = ({ children, minWidth, maxWidth, when }) => {\n  const id = 'partial:' + React.useId()\n  const isClient = isDefined(window)\n  const isFirstRender = useIsFirstRender()\n  const innerWidth = window.innerWidth\n\n  const removeChildren = (id: string) => {\n    if (isClient && isFirstRender) {\n      const el = document.getElementById(id)\n      el && (el.innerHTML = '')\n    }\n    return !0\n  }\n\n  const render = isDefined(when)\n    ? (isClient ? when!() : true) && removeChildren(id)\n    : isDefined(minWidth) && isDefined(maxWidth)\n      ? (isClient ? innerWidth <= minWidth! && innerWidth >= maxWidth! : true) && removeChildren(id)\n      : isDefined(minWidth)\n        ? (isClient ? innerWidth <= minWidth! : true) && removeChildren(id)\n        : (isClient ? innerWidth >= maxWidth! : true) && removeChildren(id)\n\n  return (\n    <div id={id} style={{ display: render ? 'contents' : 'none' }}>\n      {render && children}\n    </div>\n  )\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}